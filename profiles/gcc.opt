--verbose=0
--debug=0
--extra-warnings=0
--all-warnings=0
[double]
-mlong-double-128|128=0
-mlong-double-64|64=0
-mlong-double-80|80=0
/-/
[compat]
|none=1
-Wc++-compat|Warn about C constructs that are not in the common subset of C and C++.=0
-Wc++11-compat|Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011.=0
-Wc++14-compat|Warn about C++ constructs whose meaning differs between ISO C++ 2011 and ISO C++ 2014.=0
-Wc++17-compat|Warn about C++ constructs whose meaning differs between ISO C++ 2014 and ISO C++ 2017.=0
-Wc++20-compat|Warn about C++ constructs whose meaning differs between ISO C++ 2017 and ISO C++ 2020.=0
-Wc-binding-type|Warn if the type of a variable might be not interoperable with C.=0
-Wc11-c2x-compat|Warn about features not present in ISO C11, but present in ISO C2X.=0
-Wc90-c99-compat|Warn about features not present in ISO C90, but present in ISO C99.=0
-Wc99-c11-compat|Warn about features not present in ISO C99, but present in ISO C11.=0
/-/
[support]
|none=1
-msse|Support MMX and SSE built-in functions and code generation.=0
-msse2|Support MMX, SSE and SSE2 built-in functions and code generation.=0
-msse2avx|Encode SSE instructions with VEX prefix.=0
-msse3|Support MMX, SSE, SSE2 and SSE3 built-in functions and code generation.=0
-msse4|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in functions and code generation.=0
-msse4.1|Support MMX, SSE, SSE2, SSE3, SSSE3 and SSE4.1 built-in functions and code generation.=0
-msse4.2|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1 and SSE4.2 built-in functions and code generation.=0
-msse4a|Support MMX, SSE, SSE2, SSE3 and SSE4A built-in functions and code generation.=0
-msse5|Same as -mavx.Uses of this option are diagnosed.=0
-mssse3|Support MMX, SSE, SSE2, SSE3 and SSSE3 built-in functions and code generation.=0
-mavx|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and AVX built-in functions and code generation.=0
-mavx2|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX and AVX2 built-in functions and code generation.=0
-mavx5124fmaps|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2, AVX512F and AVX5124FMAPS built-in functions and code generation.=0
-mavx5124vnniw|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2, AVX512F and AVX5124VNNIW built-in functions and code generation.=0
-mavx512bf16|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2, AVX512F and AVX512BF16 built-in functions and code generation.=0
-mavx512bitalg|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2, AVX512F and AVX512BITALG built-in functions and code generation.=0
-mavx512bw|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2 and AVX512F and AVX512BW built-in functions and code generation.=0
-mavx512cd|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2 and AVX512F and AVX512CD built-in functions and code generation.=0
-mavx512dq|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2 and AVX512F and AVX512DQ built-in functions and code generation.=0
-mavx512er|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2 and AVX512F and AVX512ER built-in functions and code generation.=0
-mavx512f| Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2 and AVX512F built-in functionsand code generation.=0
-mavx512ifma|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2 and AVX512F and AVX512IFMA built-in functions and code generation.=0
-mavx512pf|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2 and AVX512F and AVX512PF built-in functions and code generation.=0
-mavx512vbmi|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2 and AVX512F and AVX512VBMI built-in functions and code generation.=0
-mavx512vbmi2| Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2, AVX512F and AVX512VBMI2 built-in functions and code generation.=0
-mavx512vl|Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2 and AVX512F and AVX512VL built-in functions and code generation.=0
-mavx512vnni|Support AVX512VNNI built-in functions and code generation.=0
-mavx512vp2intersect|Support AVX512VP2INTERSECT built-in functions and code generation.=0
-mavx512vpopcntdq| Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2, AVX512F and AVX512VPOPCNTDQ built-in functions and code generation.=0
-mavxvnni| Support MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1,SSE4.2, AVX, AVX2, and AVXVNNI built-in functionsand code generation.=0
/-/
[warnings]
-Waggregate-return|Warn about returning structures, unions or arrays.*0
-Waggressive-loop-optimizations|Warn if a loop with constant number of iterations triggers undefined behavior.*0
-Wanalyzer-double-fclose|Warn about code paths in which a stdio FILE can be closed more than once.*0
-Wanalyzer-double-free|Warn about code paths in which a pointer can be freed more than once.*1
-Wanalyzer-exposure-through-output-file|Warn about code paths in which sensitive data is written to a file.*0
-Wanalyzer-file-leak|Warn about code paths in which a stdio FILE is not closed.*0
-Wanalyzer-free-of-non-heap|Warn about code paths in which a non-heap pointer is freed.*0
-Wanalyzer-malloc-leak|Warn about code paths in which a heap-allocated pointer leaks.*0
-Wanalyzer-mismatching-deallocation|Warn about code paths in which the wrong deallocation function is called.*0
-Wanalyzer-null-argument|Warn about code paths in which NULL is passed to a must-not-be-NULL function argument.*0
-Wanalyzer-null-dereference|Warn about code paths in which a NULL pointer is dereferenced.*0
-Wanalyzer-possible-null-argument|Warn about code paths in which a possibly-NULL value is passed to a must-not-be-NULLfunction argument.*0
-Wanalyzer-possible-null-dereference|Warn about code paths in which a possibly-NULL pointer is dereferenced.*0
-Wanalyzer-shift-count-negative|Warn about code paths in which a shift with negative count is attempted.*0
-Wanalyzer-shift-count-overflow|Warn about code paths in which a shift with count >= width of type is attempted.*0
-Wanalyzer-tainted-array-index|Warn about code paths in which an unsanitized value is used as an array index.*0
-Wanalyzer-too-complex|Warn if the code is too complicated for the analyzer to fully explore.*0
-Wanalyzer-unsafe-call-within-signal-handler|Warn about code paths in which an async-signal-unsafe function is called from a signal handler.*0
-Wanalyzer-use-after-free|Warn about code paths in which a freed value is used.*0
-Wanalyzer-use-of-pointer-in-stale-stack-frame|Warn about code paths in which a pointer to a stale stack frame is used.*0
-Wanalyzer-write-to-const|Warn about code paths which attempt to write to a const object.*0
-Wanalyzer-write-to-string-literal|Warn about code paths which attempt to write to a string literal.*0
-Warray-bounds|Warn if an array is accessed out of bounds.*0
-Wattribute-alias|Warn about type safety and similar errors and mismatches in declarations with alias attributes.*0
-Wattribute-warning|Warn about uses of __attribute__((warning)) declarations.*0
-Wattributes|Warn about inappropriate attribute usage.*0
-Wcannot-profile|Warn when profiling instrumentation was requested, but could not be applied to a certain function.*0
-Wcast-align|Warn about pointer casts which increase alignment.*0
-Wcoverage-mismatch|Warn in case profiles in -fprofile-use do not match.*0
-Wdeprecated-declarations|Warn about uses of __attribute__((deprecated)) declarations.*0
-Wdisabled-optimization|Warn when an optimization pass is disabled.*0
-Wfatal-errors|Exit on the first error occurred.*0
-Woverflow|Warn about overflow in arithmetic expressions.*0
-Wpacked|Warn when the packed attribute has no effect on struct layout.*0
-Wpadded|Warn when padding is required to align structure members.*0
-Wreturn-local-addr|Warn about returning a pointer/reference to a | local or temporary variable.*0
-Wstrict-aliasing|Warn about code which might break strict aliasing rules.*0
-Wstrict-overflow|Warn about optimizations that assume that signed overflow is undefined.*0
-Wsuggest-attribute=cold|Warn about functions which might be candidates for __attribute__((cold)).*0
-Wsuggest-attribute=const|Warn about functions which might be candidates for __attribute__((const)).*0
-Wsuggest-attribute=malloc|Warn about functions which might be candidates for __attribute__((malloc)).*0
-Wsuggest-attribute=noreturn|Warn about functions which might be candidates for __attribute__((noreturn)).*0
-Wunreachable-code|Does nothing. Preserved for backward compatibility.*0
-Wunsafe-loop-optimizations|Does nothing. Preserved for backward compatibility.*0
-Wunused-but-set-parameter|Warn when a function parameter is only set,otherwise unused.*0
-Wunused-but-set-variable|Warn when a variable is only set, otherwise unused.*0
-Wunused-function|Warn when a function is unused.*0
-Wunused-label|Warn when a label is unused.*0
-Wunused-value|Warn when an expression value is unused.*0
-Wvector-operation-performance|Warn when a vector operation is compiled outside the SIMD.*0
-Waddress|Warn about suspicious uses of memory addresses.*0
-Waddress-of-packed-member|Warn when the address of packed member of struct or union is taken.*0
-Waggregate-return|Warn about returning structures, unions or arrays.*0
-Waggressive-loop-optimizations|Warn if a loop with constant number of iterations triggers undefined behavior.*0
-Walign-commons|Warn about alignment of COMMON blocks.*0
-Walloc-zero|Warn for calls to allocation functions that specify zero bytes.*0
-Walloca|Warn on any use of alloca.*0
-Wampersand|Warn about missing ampersand in continuedcharacter constants.*0
-Wanalyzer-double-fclose|Warn about code paths in which a stdio FILE can be closed more than once.*0
-Wanalyzer-double-free|Warn about code paths in which a pointer can be freed more than once.*1
-Wanalyzer-exposure-through-output-file|Warn about code paths in which sensitive data is written to a file.*0
-Wanalyzer-file-leak|Warn about code paths in which a stdio FILE is not closed.*0
-Wanalyzer-free-of-non-heap|Warn about code paths in which a non-heap pointer is freed.*0
-Wanalyzer-malloc-leak|Warn about code paths in which a heap-allocated pointer leaks.*0
-Wanalyzer-mismatching-deallocation|Warn about code paths in which the wrong deallocation function is called.*0
-Wanalyzer-null-argument|Warn about code paths in which NULL is passed to a must-not-be-NULL function argument.*0
-Wanalyzer-null-dereference|Warn about code paths in which a NULL pointer is dereferenced.*0
-Wanalyzer-possible-null-argument|Warn about code paths in which a possibly-NULL value is passed to a must-not-be-NULL function argument.*0
-Wanalyzer-possible-null-dereference|Warn about code paths in which a possibly-NULL pointer is dereferenced.*0
-Wanalyzer-shift-count-negative|Warn about code paths in which a shift with negative count is attempted.*0
-Wanalyzer-shift-count-overflow|Warn about code paths in which a shift with count >= width of type is attempted.*0
-Wanalyzer-stale-setjmp-buffer|Warn about code paths in which a longjmp rewinds to a jmp_buf saved in a stack frame that has returned.*0
-Wanalyzer-tainted-array-index|Warn about code paths in which an unsanitized value is used as an array index.*0
-Wanalyzer-too-complex|Warn if the code is too complicated for the analyzer to fully explore.*0
-Wanalyzer-unsafe-call-within-signal-handler|Warn about code paths in which an async-signal-unsafe function is called from a signal handler.*0
-Wanalyzer-use-after-free|Warn about code paths in which a freed value is used.*0
-Wanalyzer-use-of-pointer-in-stale-stack-frame|Warn about code paths in which a pointer to a stale stack frame is used.*0
-Wanalyzer-write-to-const|Warn about code paths which attempt to write to a const object.*0
-Wanalyzer-write-to-string-literal|Warn about code paths which attempt to write to a string literal.*0
-Warith-conversion|Warn if conversion of the result of arithmetic might change the value even though converting the operands cannot.*0
-Warray-bounds|Warn if an array is accessed out of bounds.*0
-Warray-parameter|Warn about mismatched declarations of array parameters and unsafe accesses to them.*0
-Warray-temporaries|Warn about creation of array temporaries.*0
-Wassign-intercept|Warn whenever an Objective-C assignment is being intercepted by the garbage collector.*0
-Wattribute-alias|Warn about type safety and similar errors and mismatches in declarations with alias attributes.*0
-Wattribute-warning|Warn about uses of __attribute__((warning)) declarations.*0
-Wattributes|Warn about inappropriate attribute usage.*0
-Wbad-function-cast|Warn about casting functions to incompatible types.*0
-Wbool-compare|Warn about boolean expression compared with an integer value different from true/false.*0
-Wbool-operation |Warn about certain operations on boolean expressions.*0
-Wbuiltin-declaration-mismatch|Warn when a built-in function is declared with the wrong signature.*0
-Wbuiltin-macro-redefined|Warn when a built-in preprocessor macro is undefined or redefined.*0
-Wcast-align|Warn about pointer casts which increase alignment.*0
-Wcast-function-type|Warn about casts between incompatible function types.*0
-Wcast-qual |Warn about casts which discard qualifiers.*0
-Wcast-result|Warn about casts that will produce a null result.*0
-Wchar-subscripts|Warn about subscripts whose type is "char".*0
-Wcharacter-truncation|Warn about truncated character expressions.*0
-Wclass-conversion|Warn when a conversion function will never be called due to the type it converts to.*0
-Wclass-memaccess|Warn for unsafe raw memory writes to objects of class types.*0
-Wcomment|Warn about possibly nested block comments, and C++ comments spanning more than one physical line.*0
-Wcompare-reals|Warn about equality comparisons involving REAL or COMPLEX expressions.*0
-Wconditionally-supported|Warn for conditionally-supported constructs.*0
-Wconversion|Warn for implicit type conversions that may change a value.*0
-Wconversion-extra|Warn about most implicit conversions.*0
-Wconversion-null|Warn for converting NULL from/to a non-pointer type.*0
-Wcoverage-mismatch|Warn in case profiles in -fprofile-use do not match.*0
-Wdangling-else|Warn about dangling else.*0
-Wdeclaration-after-statement|Warn when a declaration is found after a statement.*0
-Wdelete-incomplete|Warn when deleting a pointer to incomplete type.*0
-Wdelete-non-virtual-dtor|Warn about deleting polymorphic objects with non-virtual destructors.*0
-Wdeprecated|Warn if a deprecated compiler feature, class,method, or field is used.*0
-Wdeprecated-copy| Mark implicitly-declared copy operations as deprecated if the class has a user-provided copy operation.*0
-Wdeprecated-copy-dtor|Mark implicitly-declared copy operations as deprecated if the class has a user-provided copy operation or destructor.*0
-Wdeprecated-declarations|Warn about uses of __attribute__((deprecated)) declarations.*0
-Wdeprecated-enum-enum-conversion|Warn about deprecated arithmetic conversions on operands of enumeration types.*0
-Wdeprecated-enum-float-conversion|Warn about deprecated arithmetic conversions on operands where one is of enumeration type and the other is of a floating-point type.*0
-Wdesignated-init|Warn about positional initialization of structs requiring designated initializers.*0
-Wdisabled-optimization|Warn when an optimization pass is disabled.*0
-Wdiscarded-array-qualifiers|Warn if qualifiers on arrays which are pointer targets are discarded.*0
-Wdiscarded-qualifiers |Warn if type qualifiers on pointers are discarded.*0
-Wdiv-by-zero|Warn about compile-time integer division by zero.*0
-Wdo-subscript|Warn about possibly incorrect subscripts in do loops.*0
-Wdouble-promotion|Warn about implicit conversions from "float" to "double".*0
-Wduplicate-decl-specifier |Warn when a declaration has duplicate const, volatile, restrict or _Atomic specifier.*0
-Wduplicated-branches|Warn about duplicated branches in if-else statements.*0
-Wduplicated-cond|Warn about duplicated conditions in an if-else-if chain.*0
-Weffc++|Warn about violations of Effective C++ style rules.*0
-Wempty-body|Warn about an empty body in an if or else statement.*0
-Wendif-labels|Warn about stray tokens after #else and #endif.*0
-Wenum-compare|Warn about comparison of different enum types.*0
-Wenum-conversion|Warn about implicit conversion of enum types.*0
-Wexceptions|Warn when an exception handler is shadowed by another handler.*0
-Wexpansion-to-defined|Warn if "defined" is used outside #if.*0
-Wextra|Print extra (possibly unwanted) warnings.*0
-Wextra-semi|Warn about semicolon after in-class function definition.*0
-Wfloat-conversion|Warn for implicit type conversions that cause loss of floating point precision.*0
-Wfloat-equal|Warn if testing floating point numbers for equality.*0
-Wformat|Warn about printf/scanf/strftime/strfmon format string anomalies*0
-Wformat-contains-nul|Warn about format strings that contain NUL bytes.*0
-Wformat-diag|Warn about GCC format strings with strings unsuitable for diagnostics.*0
-Wformat-extra-args|Warn if passing too many arguments to a function for its format string.*0
-Wformat-nonliteral|Warn about format strings that are not literals.*0
-Wformat-security|Warn about possible security problems with format functions.*0
-Wformat-signedness|Warn about sign differences with format functions.*0
-Wformat-truncation|Warn about calls to snprintf and similar functions that truncate output.*0
-Wformat-zero-length| Warn about zero-length formats.*0
-Wframe-address|Warn when __builtin_frame_address or __builtin_return_address is used unsafely.*0
-Wfunction-elimination|Warn about function call elimination.*0
-Wif-not-aligned|Warn when the field in a struct is not aligned.*0
-Wignored-attributes|Warn whenever attributes are ignored.*0
-Wignored-qualifiers|Warn whenever type qualifiers are ignored.*0
-Wimplicit|Warn about implicit declarations.*0
-Wimplicit-function-declaration|Warn about implicit function declarations.*0
-Wimplicit-int|Warn when a declaration does not specify a type.*0
-Wimplicit-interface|Warn about calls with implicit interface.*0
-Wimplicit-procedure|Warn about called procedures not explicitly declared.*0
-Winaccessible-base|Warn when a base is inaccessible in derived due to ambiguity.*0
-Wincompatible-pointer-types|Warn when there is a conversion between pointers that have incompatible types.*0
-Winherited-variadic-ctor|Warn about C++11 inheriting constructors when the base has a variadic constructor.*0
-Winit-list-lifetime|Warn about uses of std::initializer_list that can result in dangling pointers.*0
-Winit-self|Warn about variables which are initialized to themselves.*0
-Winline|Warn when an inlined function cannot be inlined.*0
-Wint-conversion |Warn about incompatible integer to pointer and pointer to integer conversions.*0
-Wint-in-bool-context|Warn for suspicious integer expressions in boolean context.*0
-Wint-to-pointer-cast|Warn when there is a cast to a pointer from an integer of a different size.*0
-Winteger-division|Warn about constant integer divisions with truncated results.*0
-Wintrinsic-shadow|Warn if a user-procedure has the same name as an intrinsic.*0
-Wintrinsics-std |Warn on intrinsics not part of the selected standard.*0
-Winvalid-imported-macros|Warn about macros that have conflicting header units definitions.*0
-Winvalid-memory-model|Warn when an atomic memory model parameter is known to be outside the valid range.*0
-Winvalid-offsetof|Warn about invalid uses of the "offsetof" macro.*0
-Winvalid-pch|Warn about PCH files that are found but not used.*0
-Wjump-misses-init|Warn when a jump misses a variable initialization.*0
-Wline-truncation|Warn about truncated source lines.*0
-Wliteral-suffix|Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.*0
-Wlogical-not-parentheses|Warn when logical not is used on the left hand side operand of a comparison.*0
-Wlogical-op|Warn when a logical operator is suspiciously always evaluating to true or false.*0
-Wlong-long|Do not warn about using "long long" when-pedantic.*0
-Wlto-type-mismatch|During link time optimization warn about mismatched types of global declarations.*0
-Wmain |Warn about suspicious declarations of "main".*0
-Wmaybe-uninitialized|Warn about maybe uninitialized automatic variables.*0
-Wmemset-elt-size|Warn about suspicious calls to memset where the third argument contains the number of elements not multiplied by the element size.*0
-Wmemset-transposed-args|Warn about suspicious calls to memset where the third argument is constant literal zero and the second is not.*0
-Wmisleading-indentation|Warn when the indentation of the code does not reflect the block structure.*0
-Wmismatched-dealloc|Warn for deallocation calls with arguments returned from mismatched allocation functions.*0
-Wmismatched-new-delete|Warn for mismatches between calls to operator new or delete and the corresponding call to the allocation or deallocation function.*0
-Wmismatched-tags|Warn when a class is redeclared or referenced using a mismatched class-key.*0
-Wmissing-attributes|Warn about declarations of entities that may be missing attributes that related entities have been declared with.*0
-Wmissing-braces|Warn about possibly missing braces around initializers.*0
-Wmissing-declarations|Warn about global functions without previous declarations.*0
-Wmissing-field-initializers|Warn about missing fields in struct initializers.*0
-Wmissing-include-dirs|Warn about user-specified include directories that do not exist.*0
-Wmissing-parameter-type|Warn about function parameters declared without a type specifier in K&R-style functions.*0
-Wmissing-prototypes|Warn about global functions without prototypes.*0
-Wmultichar|Warn about use of multi-character character constants.*0
-Wmultiple-inheritance|Warn on direct multiple inheritance.*0
-Wmultistatement-macros|Warn about unsafe macros expanding to multiple statements used as a body of a clause such as if,else, while, switch, or for.*0
-Wnamespaces|Warn on namespace definition.*0
-Wnarrowing|Warn about narrowing conversions within { } that are ill-formed in C++11.*0
-Wnested-externs|Warn about "extern" declarations not at file scope.*0
-Wnoexcept|Warn when a noexcept expression evaluates to false even though the expression can't actually throw.*0
-Wnoexcept-type|Warn if C++17 noexcept function type will change the mangled name of a symbol.*0
-Wnon-template-friend|Warn when non-templatized friend functions are declared within a template.*0
-Wnon-virtual-dtor|Warn about non-virtual destructors.*0
-Wnonnull|Warn about NULL being passed to argument slots marked as requiring non-NULL.*0
-Wnonnull-compare|Warn if comparing pointer parameter with nonnull attribute with NULL.*0
-Wnull-dereference|Warn if dereferencing a NULL pointer may lead to erroneous or undefined behavior.*0
-Wobjc-root-class|Warn if a class interface has no superclass.*0
-Wodr|Warn about some C++ One Definition Rule violations during link time optimization.*0
-Wold-style-cast|Warn if a C-style cast is used in a program.*0
-Wold-style-declaration|Warn for obsolescent usage in a declaration.*0
-Wold-style-definition|Warn if an old-style parameter definition is used.*0
-Wopenmp-simd|Warn if a simd directive is overridden by the vectorizer cost model.*0
-Woverflow|Warn about overflow in arithmetic expressions.*0
-Woverlength-strings|Warn if a string is longer than the maximum portable length specified by the standard.*0
-Woverloaded-virtual|Warn about overloaded virtual function names.*0
-Woverride-init|Warn about overriding initializers without side effects.*0
-Woverride-init-side-effects|Warn about overriding initializers with side effects.*0
-Woverwrite-recursive|Warn that -fno-automatic may break recursion.*0
-Wpacked|Warn when the packed attribute has no effect on struct layout.*0
-Wpacked-bitfield-compat|Warn about packed bit-fields whose offset changed in GCC 4.4.*0
-Wpacked-not-aligned|Warn when fields in a struct with the packed attribute are misaligned.*0
-Wpadded|Warn when padding is required to align structure members.*0
-Wparentheses|Warn about possibly missing parentheses.*0
-Wpessimizing-move|Warn about calling std::move on a local object in a return statement preventing copy elision.*0
-Wplacement-new|Warn for placement new expressions with undefined behavior.*0
-Wpmf-conversions|Warn when converting the type of pointers to member functions.*0
-Wpointer-arith|Warn about function pointer arithmetic.*0
-Wpointer-compare|Warn when a pointer is compared with a zero character constant.*0
-Wpointer-sign|Warn when a pointer differs in signedness in an assignment.*0
-Wpointer-to-int-cast|Warn when a pointer is cast to an integer of a different size.*0
-Wpragmas|Warn about misuses of pragmas.*0
-Wprio-ctor-dtor|Warn if constructor or destructors with priorities from 0 to 100 are used.*0
-Wproperty-assign-default|Warn if a property for an Objective-C object has no assign semantics specified.*0
-Wprotocol|Warn if inherited methods are unimplemented.*0
-Wpsabi|This option lacks documentation.*0
-Wrange-loop-construct|Warn when a range-based for-loop is creating unnecessary copies.*0
-Wreal-q-constant|Warn about real-literal-constants with 'q' exponent-letter.*0
-Wrealloc-lhs|Warn when a left-hand-side array variable is reallocated.*0
-Wrealloc-lhs-all|Warn when a left-hand-side variable is reallocated.*0
-Wredundant-decls|Warn about multiple declarations of the same object.*0
-Wredundant-move|Warn about redundant calls to std::move.*0
-Wredundant-tags|Warn when a class or enumerated type is referenced using a redundant class-key.*0
-Wregister|Warn about uses of register storage specifier.*0
-Wreorder|Warn when the compiler reorders code.*0
-Wrestrict|Warn when an argument passed to a restrict-qualified parameter aliases with another argument.*0
-Wreturn-local-addr|Warn about returning a pointer/reference to a local or temporary variable.*0
-Wreturn-type|Warn whenever a function's return type defaults to "int" (C), or about inconsistent return types (C++).*0
-Wscalar-storage-order|Warn on suspicious constructs involving reverse scalar storage order.*0
-Wselector |Warn if a selector has multiple methods.*0
-Wsequence-point|Warn about possible violations of sequence point rules.*0
-Wshadow-ivar|Warn if a local declaration hides an instance variable.*0
-Wshift-count-negative|Warn if shift count is negative.*0
-Wshift-count-overflow|Warn if shift count >= width of type.*0
-Wshift-negative-value|Warn if left shifting a negative value.*0
-Wshift-overflow|Warn if left shift of a signed value overflows.*0
-Wsign-compare|Warn about signed-unsigned comparisons.*0
-Wsign-conversion|Warn for implicit type conversions between signed and unsigned integers.*0
-Wsign-promo|Warn when overload promotes from unsigned to signed.*0
-Wsized-deallocation|Warn about missing sized deallocation functions.*0
-Wsizeof-array-argument|Warn when sizeof is applied on a parameter declared as an array.*0
-Wsizeof-array-div|Warn about divisions of two sizeof operators when the first one is applied to an array and the divisor does not equal the size of the array element.*0
-Wsizeof-pointer-div|Warn about suspicious divisions of two sizeof expressions that don't work correctly with pointers.*0
-Wsizeof-pointer-memaccess|Warn about suspicious length parameters to certain string functions if the argument uses sizeof.*0
-Wstack-protector|Warn when not issuing stack smashing protection for some reason.*0
-Wstrict-aliasing|Warn about code which might break strict aliasing rules.*0
-Wstrict-null-sentinel|Warn about uncasted NULL used as sentinel.*0
-Wstrict-overflow|Warn about optimizations that assume that signed overflow is undefined.*0
-Wstrict-prototypes|Warn about unprototyped function declarations.*0
-Wstrict-selector-match|Warn if type signatures of candidate methods do not match exactly.*0
-Wstring-compare|Warn about calls to strcmp and strncmp used in equality expressions that are necessarily true or false due to the length of one and size of the other argument.*0
-Wstringop-overflow|Warn about buffer overflow in string manipulation functions like memcpy and strcpy.*0
-Wstringop-overread|Warn about reading past the end of a source array in string manipulation functions like memchr and memcpy.*0
-Wstringop-truncation|Warn about truncation in string manipulation functions like strncat and strncpy.*0
-Wsubobject-linkage|Warn if a class type has a base or a field whose type uses the anonymous namespace or depends on a type with no linkage.*0
-Wsuggest-attribute=cold|Warn about functions which might be candidates for __attribute__((cold)).*0
-Wsuggest-attribute=const|Warn about functions which might be candidates for __attribute__((const)).*0
-Wsuggest-attribute=format|Warn about functions which might be candidates for format attributes.*0
-Wsuggest-attribute=malloc |Warn about functions which might be candidates for __attribute__((malloc)).*0
-Wsuggest-attribute=noreturn|Warn about functions which might be candidates for __attribute__((noreturn)).*0
-Wsuggest-attribute=pure|Warn about functions which might be candidates for __attribute__((pure)).*0
-Wsuggest-final-methods|Warn about C++ virtual methods where adding final keyword would improve code quality.*0
-Wsuggest-final-types|Warn about C++ polymorphic types where adding final keyword would improve code quality.*0
-Wsuggest-override|Suggest that the override keyword be used when the declaration of a virtual function overrides another.*0
-Wsurprising|Warn about "suspicious" constructs.*0
-Wswitch|Warn about enumerated switches, with no default,missing a case.*0
-Wswitch-bool|Warn about switches with boolean controlling expression.*0
-Wswitch-default|Warn about enumerated switches missing a "default:" statement.*0
-Wswitch-enum|Warn about all enumerated switches missing a specific case.*0
-Wswitch-outside-range|Warn about switch values that are outside of the switch's type range.*0
-Wswitch-unreachable|Warn about statements between switch's controlling expression and the first case.*0
-Wsync-nand|Warn when __sync_fetch_and_nand and __sync_nand_and_fetch built-in functions are used.*0
-Wsynth|Deprecated.This switch has no effect.*0
-Wsystem-headers|Do not suppress warnings from system headers.*0
-Wtabs|Permit nonconforming uses of the tab character.*0
-Wtarget-lifetime|Warn if the pointer in a pointer assignment might outlive its target.*0
-Wtautological-compare|Warn if a comparison always evaluates to true or false.*0
-Wtemplates|Warn on primary template declaration.*0
-Wterminate|Warn if a throw expression will always result in a call to terminate().*0
-Wtraditional|Warn about features not present in traditional C.*0
-Wtraditional-conversion|Warn of prototypes causing type conversions different from what would happen in the absence of prototype.*0
-Wtrampolines|Warn whenever a trampoline is generated.*0
-Wtrigraphs|Warn if trigraphs are encountered that might affect the meaning of the program.*0
-Wtsan|Warn about unsupported features in Thread Sanitizer.*0
-Wtype-limits|Warn if a comparison is always true or always false due to the limited range of the data type.*0
-Wundeclared-selector|Warn about @selector()s without previously declared methods.*0
-Wundef|Warn if an undefined macro is used in an #if directive.*0
-Wundefined-do-loop |Warn about an invalid DO loop.*0
-Wunderflow|Warn about underflow of numerical constant expressions.*0
-Wuninitialized|Warn about uninitialized automatic variables.*0
-Wunknown-pragmas|Warn about unrecognized pragmas.*0
-Wunreachable-code|Does nothing. Preserved for backward compatibility.*0
-Wunsafe-loop-optimizations|Does nothing. Preserved for backward compatibility.*0
-Wunsuffixed-float-constants|Warn about unsuffixed float constants.*0
-Wunused|Enable all.*0
-Wunused-but-set-parameter|Warn when a function parameter is only set,otherwise unused.*0
-Wunused-but-set-variable|Warn when a variable is only set, otherwise unused.*0
-Wunused-const-variable|Warn when a const variable is unused.*0
-Wunused-dummy-argument|Warn about unused dummy arguments.*0
-Wunused-function|Warn when a function is unused.*0
-Wunused-label|Warn when a label is unused.*0
-Wunused-local-typedefs|Warn when typedefs locally defined in a function are not used.*0
-Wunused-macros|Warn about macros defined in the main file that are not used.*0
-Wunused-parameter|Warn when a function parameter is unused.*0
-Wunused-result|Warn if a caller of a function, marked with attribute warn_unused_result, does not use its return value.*0
-Wunused-value|Warn when an expression value is unused.*0
-Wunused-variable|Warn when a variable is unused.*0
-Wuse-without-only|Warn about USE statements that have no ONLY qualifier.*0
-Wuseless-cast|Warn about useless casts.*0
-Wvarargs|Warn about questionable usage of the macros used to retrieve variable arguments.*0
-Wvariadic-macros|Warn about using variadic macros.*0
-Wvector-operation-performance|Warn when a vector operation is compiled outside the SIMD.*0
-Wvexing-parse|Warn about the most vexing parse syntactic ambiguity.*0
-Wvirtual-inheritance|Warn on direct virtual inheritance.*0
-Wvirtual-move-assign|Warn if a virtual base has a non-trivial move assignment operator.*0
-Wvla|Warn if a variable length array is used.*0
-Wvla-parameter|Warn about mismatched declarations of VLA parameters.*0
-Wvolatile|Warn about deprecated uses of volatile qualifier.*0
-Wvolatile-register-var|Warn when a register variable is declared volatile.*0
-Wwrite-strings|In C++, nonzero means warn about deprecated conversion from string literals to 'char *0
-Wzero-as-null-pointer-constant|Warn when a literal '0' is used as null pointer.*0
-Wzero-length-bounds|Warn about accesses to interior zero-length array members.*0
-Wzerotrip|Warn about zero-trip DO loops.*0
-frequire-return-statement|Functions which return values must end with return statements.*0
/-/